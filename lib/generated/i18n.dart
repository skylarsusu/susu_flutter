import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get EMAIL_AUTH_VALIDATION_EMPTY => "Your email can't be empty!";
  String get EMAIL_AUTH_VALIDATION_INVALID => "This email is invalid!";
  String get address => "Address List";
  String get call_history => "Call History";
  String get cancel => "cancel";
  String get cancel_collect => "Cancel Collect";
  String get choice_address => "Choice Address";
  String get choose => "Please Choose";
  String get clear => "Clear Cache Files";
  String get close => "close";
  String get collect => "Collect";
  String get complete => "Done";
  String get completeLoad => "Load done";
  String get completeRefresh => "Refresh done";
  String get confirmPassword => "Confirm Password";
  String get contact => "Contact";
  String get contacts => "Contacts";
  String get create_address => "Create Address";
  String get delete => "Delete";
  String get edit => "Edit";
  String get eidt_address => "Update Address";
  String get email => "Email";
  String get en => "English";
  String get enterValidEmail => "Enter Valid Email";
  String get exit => "Exit";
  String get fail => " Fail";
  String get forgot_password => "Forgot Password";
  String get get_v_code => "get code";
  String get go_register => "No account? Go and register";
  String get input_password => "Please enter your password";
  String get input_phone => "Please enter your account";
  String get input_v_code => "Please enter your identifying code";
  String get language => "Choose Language";
  String get loadFailed => "Load failed";
  String get loadFinish => "Load completed";
  String get loadMore => "LoadMore";
  String get loaded => "Load completed";
  String get loading => "Loading...";
  String get login => "login";
  String get menu => "menu";
  String get noMore => "No more";
  String get password => "Password";
  String get password_login => "Password Login";
  String get pick_a_color => "Pick a color!";
  String get pullToRefresh => "Pull to refresh";
  String get pushToLoad => "Pull to load";
  String get quickly_login => "Quickly Login";
  String get refresh => "Refresh";
  String get refreshFailed => "Refresh failed";
  String get refreshFinish => "Refresh completed";
  String get refreshed => "Refresh completed";
  String get refreshing => "Refreshing...";
  String get register => "sign up";
  String get releaseToLoad => "Release to load";
  String get releaseToRefresh => "Release to refresh";
  String get reset_password => "Reset Password";
  String get save => "Save";
  String get setting => "Setting";
  String get share => "Share";
  String get submit => "submit";
  String get success => " Success";
  String get sure => "sure";
  String get theme => "Choose Theme";
  String get tip => "Tip : The account is not registered? please ";
  String get update => "Update";
  String get updateAt => "Update at %T";
  String get username => "User Name";
  String get zh => "Chinese";
}

class $zh_HK extends S {
  const $zh_HK();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get go_register => "還沒賬號？快去註冊";
  @override
  String get updateAt => "更新于于 %T";
  @override
  String get language => "選擇語言";
  @override
  String get releaseToLoad => "釋放加载";
  @override
  String get setting => "設置";
  @override
  String get loaded => "加載完成";
  @override
  String get password => "密码";
  @override
  String get refreshFailed => "刷新失敗";
  @override
  String get pushToLoad => "拉動加載";
  @override
  String get contact => "聯繫人";
  @override
  String get tip => "提示：位註冊賬號的手機號，請先";
  @override
  String get sure => "確定";
  @override
  String get edit => "編輯";
  @override
  String get loadMore => "加載";
  @override
  String get loadFailed => "加載失败";
  @override
  String get en => "英文";
  @override
  String get loading => "正在加載...";
  @override
  String get enterValidEmail => "请输入正确的邮箱";
  @override
  String get zh => "中文";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get exit => "退出賬號";
  @override
  String get fail => "失敗";
  @override
  String get completeLoad => "完成加载";
  @override
  String get success => "成功";
  @override
  String get choice_address => "選擇地址";
  @override
  String get call_history => "通話記錄";
  @override
  String get reset_password => "重置登錄密碼";
  @override
  String get input_phone => "請輸入賬號";
  @override
  String get password_login => "密碼登錄";
  @override
  String get collect => "收藏";
  @override
  String get noMore => "沒有更多數據";
  @override
  String get submit => "提交";
  @override
  String get input_password => "請輸入密碼";
  @override
  String get save => "保存";
  @override
  String get update => "檢查更新";
  @override
  String get choose => "請選擇";
  @override
  String get login => "登錄";
  @override
  String get quickly_login => "快速登錄";
  @override
  String get delete => "刪除";
  @override
  String get loadFinish => "加載完成";
  @override
  String get EMAIL_AUTH_VALIDATION_EMPTY => "邮箱不能为空!";
  @override
  String get eidt_address => "修改地址";
  @override
  String get cancel_collect => "取消收藏";
  @override
  String get get_v_code => "獲取驗證碼";
  @override
  String get releaseToRefresh => "釋放刷新";
  @override
  String get confirmPassword => "确认密码";
  @override
  String get theme => "選擇主題";
  @override
  String get share => "分享";
  @override
  String get close => "關閉";
  @override
  String get completeRefresh => "完成刷新";
  @override
  String get email => "邮箱";
  @override
  String get address => "收貨地址";
  @override
  String get refreshed => "刷新完成";
  @override
  String get pullToRefresh => "拉動刷新";
  @override
  String get clear => "清理緩存";
  @override
  String get refresh => "刷新";
  @override
  String get EMAIL_AUTH_VALIDATION_INVALID => "邮箱不合法!";
  @override
  String get menu => "菜單";
  @override
  String get input_v_code => "請輸入驗證碼";
  @override
  String get pick_a_color => "選擇一種顏色!";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get create_address => "新增地址";
  @override
  String get complete => "完成";
  @override
  String get contacts => "通訊錄";
  @override
  String get register => "註冊";
  @override
  String get forgot_password => "忘記密碼";
  @override
  String get username => "用户名";
}

class $zh_TW extends S {
  const $zh_TW();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get go_register => "還沒賬號？快去註冊";
  @override
  String get updateAt => "更新于于 %T";
  @override
  String get language => "選擇語言";
  @override
  String get releaseToLoad => "釋放加载";
  @override
  String get setting => "設置";
  @override
  String get loaded => "加載完成";
  @override
  String get password => "密码";
  @override
  String get refreshFailed => "刷新失敗";
  @override
  String get pushToLoad => "拉動加載";
  @override
  String get contact => "聯繫人";
  @override
  String get tip => "提示：位註冊賬號的手機號，請先";
  @override
  String get sure => "確定";
  @override
  String get edit => "編輯";
  @override
  String get loadMore => "加載";
  @override
  String get loadFailed => "加載失败";
  @override
  String get en => "英文";
  @override
  String get loading => "正在加載...";
  @override
  String get enterValidEmail => "请输入正确的邮箱";
  @override
  String get zh => "中文";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get exit => "退出賬號";
  @override
  String get fail => "失敗";
  @override
  String get completeLoad => "完成加载";
  @override
  String get success => "成功";
  @override
  String get choice_address => "選擇地址";
  @override
  String get call_history => "通話記錄";
  @override
  String get reset_password => "重置登錄密碼";
  @override
  String get input_phone => "請輸入賬號";
  @override
  String get password_login => "密碼登錄";
  @override
  String get collect => "收藏";
  @override
  String get noMore => "沒有更多數據";
  @override
  String get submit => "提交";
  @override
  String get input_password => "請輸入密碼";
  @override
  String get save => "保存";
  @override
  String get update => "檢查更新";
  @override
  String get choose => "請選擇";
  @override
  String get login => "登錄";
  @override
  String get quickly_login => "快速登錄";
  @override
  String get delete => "刪除";
  @override
  String get loadFinish => "加載完成";
  @override
  String get EMAIL_AUTH_VALIDATION_EMPTY => "邮箱不能为空!";
  @override
  String get eidt_address => "修改地址";
  @override
  String get cancel_collect => "取消收藏";
  @override
  String get get_v_code => "獲取驗證碼";
  @override
  String get releaseToRefresh => "釋放刷新";
  @override
  String get confirmPassword => "确认密码";
  @override
  String get theme => "選擇主題";
  @override
  String get share => "分享";
  @override
  String get close => "關閉";
  @override
  String get completeRefresh => "完成刷新";
  @override
  String get email => "邮箱";
  @override
  String get address => "收貨地址";
  @override
  String get refreshed => "刷新完成";
  @override
  String get pullToRefresh => "拉動刷新";
  @override
  String get clear => "清理緩存";
  @override
  String get refresh => "刷新";
  @override
  String get EMAIL_AUTH_VALIDATION_INVALID => "邮箱不合法!";
  @override
  String get menu => "菜單";
  @override
  String get input_v_code => "請輸入驗證碼";
  @override
  String get pick_a_color => "選擇一種顏色!";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get create_address => "新增地址";
  @override
  String get complete => "完成";
  @override
  String get contacts => "通訊錄";
  @override
  String get register => "註冊";
  @override
  String get forgot_password => "忘記密碼";
  @override
  String get username => "用户名";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get go_register => "还没账号？快去注册";
  @override
  String get updateAt => "更新于 %T";
  @override
  String get language => "选择语言";
  @override
  String get releaseToLoad => "释放加载";
  @override
  String get setting => "设置";
  @override
  String get loaded => "加载完成";
  @override
  String get password => "密码";
  @override
  String get refreshFailed => "刷新失败";
  @override
  String get pushToLoad => "拉动加载";
  @override
  String get contact => "联系人";
  @override
  String get tip => "提示：未注册账号的手机号，请先";
  @override
  String get sure => "确定";
  @override
  String get edit => "编辑";
  @override
  String get loadMore => "加载";
  @override
  String get loadFailed => "加载失败";
  @override
  String get en => "英文";
  @override
  String get loading => "正在加载...";
  @override
  String get enterValidEmail => "请输入正确的邮箱";
  @override
  String get zh => "中文";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get exit => "退出账号";
  @override
  String get fail => "失败";
  @override
  String get completeLoad => "完成加载";
  @override
  String get success => "成功";
  @override
  String get choice_address => "选择地址";
  @override
  String get call_history => "通话记录";
  @override
  String get reset_password => "重置登录密码";
  @override
  String get input_phone => "请输入账号";
  @override
  String get password_login => "密码登录";
  @override
  String get collect => "收藏";
  @override
  String get noMore => "没有更多数据";
  @override
  String get submit => "提交";
  @override
  String get input_password => "请输入密码";
  @override
  String get save => "保存";
  @override
  String get update => "检查更新";
  @override
  String get choose => "请选择";
  @override
  String get login => "登录";
  @override
  String get quickly_login => "快速登录";
  @override
  String get delete => "删除";
  @override
  String get loadFinish => "加载完成";
  @override
  String get EMAIL_AUTH_VALIDATION_EMPTY => "邮箱不能为空!";
  @override
  String get eidt_address => "修改地址";
  @override
  String get cancel_collect => "取消收藏";
  @override
  String get get_v_code => "获取验证码";
  @override
  String get releaseToRefresh => "释放刷新";
  @override
  String get confirmPassword => "确认密码";
  @override
  String get theme => "选择主题";
  @override
  String get share => "分享";
  @override
  String get close => "关闭";
  @override
  String get completeRefresh => "完成刷新";
  @override
  String get email => "邮箱";
  @override
  String get address => "收货地址";
  @override
  String get refreshed => "刷新完成";
  @override
  String get pullToRefresh => "拉动刷新";
  @override
  String get clear => "清理缓存";
  @override
  String get refresh => "刷新";
  @override
  String get EMAIL_AUTH_VALIDATION_INVALID => "邮箱不合法!";
  @override
  String get menu => "菜单";
  @override
  String get input_v_code => "请输入验证码";
  @override
  String get pick_a_color => "选择一种颜色!";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get create_address => "新增地址";
  @override
  String get complete => "完成";
  @override
  String get contacts => "通讯录";
  @override
  String get register => "注册";
  @override
  String get forgot_password => "忘记密码";
  @override
  String get username => "用户名";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "HK"),
      Locale("zh", "TW"),
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_HK":
          S.current = const $zh_HK();
          return SynchronousFuture<S>(S.current);
        case "zh_TW":
          S.current = const $zh_TW();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
